openapi: 3.0.3
info:
  version: 0.1.1
  title: Datagrid API
  description: Datagrid API
servers:
  - url: https://api.datagrid.com/v1
security:
  - BearerAuth: []
paths:
  /agents:
    get:
      summary: List agents
      operationId: ListAgents
      description: List all agents for the authenticated organization
      tags:
        - Agents
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/after'
        - $ref: '#/components/parameters/before'
      responses:
        '200':
          description: List of agents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentListResponse'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            // Automatically fetches more pages as needed.
            for await (const agent of client.agents.list()) {
              console.log(agent.id);
            }
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            page = client.agents.list()
            page = page.data[0]
            print(page.id)
    post:
      summary: Create agent
      operationId: CreateAgent
      description: Create a new agent
      tags:
        - Agents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAgentRequest'
      responses:
        '201':
          description: Created agent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            const agent = await client.agents.create({ name: 'name' });

            console.log(agent.id);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            agent = client.agents.create(
                name="name",
            )
            print(agent.id)
  /agents/{agent_id}:
    get:
      summary: Retrieve agent
      operationId: RetrieveAgent
      description: Get details of a specific agent
      tags:
        - Agents
      parameters:
        - name: agent_id
          in: path
          required: true
          description: The ID of the agent to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Agent details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
        '404':
          description: Agent not found
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            const agent = await client.agents.retrieve('agent_id');

            console.log(agent.id);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            agent = client.agents.retrieve(
                "agent_id",
            )
            print(agent.id)
    patch:
      summary: Update agent
      operationId: UpdateAgent
      description: Update an agent configuration
      tags:
        - Agents
      parameters:
        - name: agent_id
          in: path
          required: true
          description: The ID of the agent to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAgentRequest'
      responses:
        '200':
          description: Updated agent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
        '404':
          description: Agent not found
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            const agent = await client.agents.update('agent_id');

            console.log(agent.id);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            agent = client.agents.update(
                agent_id="agent_id",
            )
            print(agent.id)
    delete:
      summary: Delete agent
      operationId: DeleteAgent
      description: Delete an agent
      tags:
        - Agents
      parameters:
        - name: agent_id
          in: path
          required: true
          description: The ID of the agent to delete
          schema:
            type: string
      responses:
        '204':
          description: Agent deleted successfully
        '404':
          description: Agent not found
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            await client.agents.delete('agent_id');
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            client.agents.delete(
                "agent_id",
            )
  /connections:
    post:
      summary: Create connection
      operationId: Connection.createConnection
      description: >-
        Creates a new connection to authenticate with a third-party service (like Google Drive, Hubspot,
        Dropbox, etc.) and returns a redirect URL for the connection authentication flow.
      tags:
        - Connections
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - connector_id
              properties:
                connector_id:
                  type: string
                  description: The connector ID for the third-party service to connect to.
      responses:
        '200':
          description: Connection creation initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedirectURLResponse'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            const redirectURLResponse = await client.connections.create({ connector_id: 'connector_id' });

            console.log(redirectURLResponse.redirect_url);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            redirect_url_response = client.connections.create(
                connector_id="connector_id",
            )
            print(redirect_url_response.redirect_url)
    get:
      summary: List connections
      operationId: Connection.listConnections
      description: Returns the list of authenticated connections to third-party services.
      tags:
        - Connections
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/after'
        - $ref: '#/components/parameters/before'
        - name: connector_id
          in: query
          required: false
          schema:
            type: string
          description: Filter connections by connector ID.
      responses:
        '200':
          description: List of connections
          content:
            application/json:
              schema:
                type: object
                required:
                  - object
                  - data
                properties:
                  object:
                    type: string
                    enum:
                      - list
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Connection'
                    description: An array containing the actual response elements, paginated by any request parameters.
                  has_more:
                    type: boolean
                    description: >-
                      Whether or not there are more elements available after this set. If false, this set
                      comprises the end of the list.
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            // Automatically fetches more pages as needed.
            for await (const connection of client.connections.list()) {
              console.log(connection.id);
            }
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            page = client.connections.list()
            page = page.data[0]
            print(page.id)
  /connections/{connection_id}:
    get:
      summary: Retrieve connection
      operationId: Connection.retrieveConnection
      description: Retrieves details about an authenticated connection by id.
      tags:
        - Connections
      parameters:
        - name: connection_id
          in: path
          required: true
          schema:
            type: string
          description: The id of the connection to retrieve.
      responses:
        '200':
          description: Retrieved connection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            const connection = await client.connections.retrieve('connection_id');

            console.log(connection.id);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            connection = client.connections.retrieve(
                "connection_id",
            )
            print(connection.id)
    patch:
      summary: Update connection
      operationId: Connection.updateConnection
      description: Update a connection's attributes.
      tags:
        - Connections
      parameters:
        - name: connection_id
          in: path
          required: true
          schema:
            type: string
          description: The id of the connection to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: The name of the connection.
      responses:
        '200':
          description: Successfully updated connection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            const connection = await client.connections.update('connection_id', { name: 'name' });

            console.log(connection.id);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            connection = client.connections.update(
                connection_id="connection_id",
                name="name",
            )
            print(connection.id)
    delete:
      summary: Delete connection
      operationId: Connection.deleteConnection
      description: Delete an authenticated connection to a third-party service.
      tags:
        - Connections
      parameters:
        - name: connection_id
          in: path
          required: true
          schema:
            type: string
          description: The id of the connection to delete.
      responses:
        '200':
          description: Successfully deleted connection
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            await client.connections.delete('connection_id');
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            client.connections.delete(
                "connection_id",
            )
  /connectors:
    get:
      summary: List connectors
      operationId: Connectors.listConnectors
      description: Returns the list of available connectors that can be used to connect to third-party services.
      tags:
        - Connectors
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/after'
        - $ref: '#/components/parameters/before'
      responses:
        '200':
          description: List of connectors
          content:
            application/json:
              schema:
                type: object
                required:
                  - object
                  - data
                properties:
                  object:
                    type: string
                    enum:
                      - list
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Connector'
                    description: An array containing the actual response elements, paginated by any request parameters.
                  has_more:
                    type: boolean
                    description: >-
                      Whether or not there are more elements available after this set. If false, this set
                      comprises the end of the list.
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            // Automatically fetches more pages as needed.
            for await (const connector of client.connectors.list()) {
              console.log(connector.id);
            }
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            page = client.connectors.list()
            page = page.data[0]
            print(page.id)
  /converse:
    post:
      summary: Converse
      operationId: Converse
      description: Converse with an AI Agent
      tags:
        - Converse
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConverseRequestBody'
      responses:
        '200':
          description: Converse response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConverseResponse'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            const response = await client.converse({ prompt: 'string' });

            console.log(response.content);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            response = client.converse(
                prompt="string",
            )
            print(response.content)
  /organization/credits:
    get:
      summary: Get credits
      description: Summarise the credits in your account for the current billing period.
      operationId: getCredits
      tags:
        - Credits
      responses:
        '200':
          description: Credits Summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditsReport'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            const creditsReport = await client.organization.credits.get();

            console.log(creditsReport.consumed);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            credits_report = client.organization.credits.get()
            print(credits_report.consumed)
  /files:
    post:
      summary: Create files
      operationId: Files.createFiles
      description: Create files which can be passed as input to agents.
      tags:
        - Files
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  nullable: false
      responses:
        '201':
          description: Successfully created file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatagridFile'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            const fileObject = await client.files.create({ file: fs.createReadStream('path/to/file') });

            console.log(fileObject.id);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            file_object = client.files.create(
                file=b"raw file contents",
            )
            print(file_object.id)
    get:
      summary: List files
      operationId: Files.listFiles
      description: Returns the list of files.
      tags:
        - Files
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/after'
        - $ref: '#/components/parameters/before'
      responses:
        '200':
          description: List of files
          content:
            application/json:
              schema:
                type: object
                required:
                  - object
                  - data
                properties:
                  object:
                    type: string
                    enum:
                      - list
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DatagridFile'
                    description: An array containing the actual response elements, paginated by any request parameters.
                  has_more:
                    type: boolean
                    description: >-
                      Whether or not there are more elements available after this set. If false, this set
                      comprises the end of the list.
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            // Automatically fetches more pages as needed.
            for await (const fileObject of client.files.list()) {
              console.log(fileObject.id);
            }
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            page = client.files.list()
            page = page.data[0]
            print(page.id)
  /files/{file_id}:
    get:
      summary: Retrieve file
      operationId: Files.retrieveFile
      description: Retrieves a file by id.
      tags:
        - Files
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            type: string
          description: The id of the file to retrieve.
      responses:
        '200':
          description: Retrieved file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatagridFile'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            const fileObject = await client.files.retrieve('file_id');

            console.log(fileObject.id);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            file_object = client.files.retrieve(
                "file_id",
            )
            print(file_object.id)
    delete:
      summary: Delete file
      operationId: Files.deleteFile
      description: Delete file.
      tags:
        - Files
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            type: string
          description: The id of the file to delete.
      responses:
        '204':
          description: Successfully deleted file
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            await client.files.delete('file_id');
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            client.files.delete(
                "file_id",
            )
  /files/{file_id}/content:
    get:
      summary: Retrieve file content
      operationId: Files.downloadFile
      description: Returns the content of a file.
      tags:
        - Files
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            const response = await client.files.content('file_id');

            console.log(response);

            const content = await response.blob();
            console.log(content);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            response = client.files.content(
                "file_id",
            )
            print(response)
            content = response.read()
            print(content)
  /knowledge/connect:
    post:
      summary: Create knowledge from connection
      operationId: Knowledge.createKnowledgeFromConnection
      description: Create knowledge from connection which will be learned and leveraged by agents.
      tags:
        - Knowledge
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - connection_id
              properties:
                connection_id:
                  type: string
                  description: The id of the connection to be used to create the knowledge.
      responses:
        '201':
          description: Successfully created knowledge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedirectURLResponse'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            const redirectURLResponse = await client.knowledge.connect({ connection_id: 'connection_id' });

            console.log(redirectURLResponse.redirect_url);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            redirect_url_response = client.knowledge.connect(
                connection_id="connection_id",
            )
            print(redirect_url_response.redirect_url)
  /knowledge:
    post:
      summary: Create knowledge
      operationId: Knowledge.createKnowledge
      description: Create knowledge which will be learned and leveraged by agents.
      tags:
        - Knowledge
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the knowledge.
                  nullable: true
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  nullable: true
                  description: >-
                    The files to be uploaded and learned. Supported media types are `pdf`, `json`, `csv`,
                    `text`, `png`, `jpeg`, `excel`, `google sheets`.
      responses:
        '201':
          description: Successfully created knowledge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Knowledge'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            const knowledge = await client.knowledge.create();

            console.log(knowledge.id);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            knowledge = client.knowledge.create()
            print(knowledge.id)
    get:
      summary: List knowledge
      operationId: Knowledge.listKnowledge
      description: Returns the list of knowledge.
      tags:
        - Knowledge
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/after'
        - $ref: '#/components/parameters/before'
      responses:
        '200':
          description: List of knowledge
          content:
            application/json:
              schema:
                type: object
                required:
                  - object
                  - data
                properties:
                  object:
                    type: string
                    enum:
                      - list
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Knowledge'
                    description: An array containing the actual response elements, paginated by any request parameters.
                  has_more:
                    type: boolean
                    description: >-
                      Whether or not there are more elements available after this set. If false, this set
                      comprises the end of the list.
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            // Automatically fetches more pages as needed.
            for await (const knowledge of client.knowledge.list()) {
              console.log(knowledge.id);
            }
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            page = client.knowledge.list()
            page = page.data[0]
            print(page.id)
  /knowledge/{knowledge_id}:
    get:
      summary: Retrieve knowledge
      operationId: Knowledge.retrieveKnowledge
      description: Retrieves a knowledge by id.
      tags:
        - Knowledge
      parameters:
        - name: knowledge_id
          in: path
          required: true
          schema:
            type: string
          description: The id of the knowledge to retrieve.
      responses:
        '200':
          description: Retrieved knowledge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Knowledge'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            const knowledge = await client.knowledge.retrieve('knowledge_id');

            console.log(knowledge.id);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            knowledge = client.knowledge.retrieve(
                "knowledge_id",
            )
            print(knowledge.id)
    patch:
      summary: Update knowledge
      operationId: Knowledge.updateKnowledge
      description: Update a knowledge's attributes.
      tags:
        - Knowledge
      parameters:
        - name: knowledge_id
          in: path
          required: true
          schema:
            type: string
          description: The id of the knowledge to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: The new name for the `knowledge`.
              required:
                - name
              properties:
                name:
                  type: string
      responses:
        '200':
          description: Successfully updated knowledge
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            const knowledge = await client.knowledge.update('knowledge_id', { name: 'name' });

            console.log(knowledge.name);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            knowledge = client.knowledge.update(
                knowledge_id="knowledge_id",
                name="name",
            )
            print(knowledge.name)
    delete:
      summary: Delete knowledge
      operationId: Knowledge.deleteKnowledge
      description: Delete knowledge.
      tags:
        - Knowledge
      parameters:
        - name: knowledge_id
          in: path
          required: true
          schema:
            type: string
          description: The id of the knowledge to delete.
      responses:
        '204':
          description: Successfully deleted knowledge
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            await client.knowledge.delete('knowledge_id');
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            client.knowledge.delete(
                "knowledge_id",
            )
  /user-memories:
    get:
      summary: List User Memory
      operationId: Memory.listUserMemory
      description: List the memories for a given user and agent that the user has access to
      tags:
        - Memory
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: User memory list
          content:
            application/json:
              schema:
                type: object
                required:
                  - object
                  - data
                properties:
                  object:
                    type: string
                    enum:
                      - list
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserMemory'
                    description: An array containing the actual response elements, paginated by any request parameters.
                  has_more:
                    type: boolean
                    description: >-
                      Whether or not there are more elements available after this set. If false, this set
                      comprises the end of the list.
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            const users = await client.memory.user.list();

            console.log(users.data);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            users = client.memory.user.list()
            print(users.data)
    post:
      summary: Create User Memory
      operationId: Memory.createUserMemory
      description: Create a user memory
      tags:
        - Memory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserMemoryRequest'
      responses:
        '201':
          description: Successfully created user memory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMemory'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            const userMemory = await client.memory.user.create({ agent_id: 'agent_id', memory: 'memory' });

            console.log(userMemory.id);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            user_memory = client.memory.user.create(
                agent_id="agent_id",
                memory="memory",
            )
            print(user_memory.id)
  /user-memories/{user_memory_id}:
    delete:
      summary: Delete User Memory
      operationId: Memory.deleteUserMemory
      description: Delete a user memory
      tags:
        - Memory
      parameters:
        - name: user_memory_id
          description: The ID of the user memory to delete.
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted user memory
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            await client.memory.user.delete('user_memory_id');
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            client.memory.user.delete(
                "user_memory_id",
            )
  /organization/users:
    get:
      summary: List users
      operationId: Users.listOrganizationUsers
      description: Retrieve a list of users in the specified organization.
      tags:
        - Users
      parameters:
        - name: search
          in: query
          schema:
            type: string
          required: false
          description: Search term to filter users by name or email
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/after'
        - $ref: '#/components/parameters/before'
      responses:
        '200':
          description: List of users in the organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganizationUsers'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            // Automatically fetches more pages as needed.
            for await (const organizationUser of client.organization.users.list()) {
              console.log(organizationUser.id);
            }
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            page = client.organization.users.list()
            page = page.data[0]
            print(page.id)
  /organization/users/{user_id}:
    get:
      summary: Retrieve user
      operationId: Users.getOrganizationUser
      description: Retrieve details of a specific user in the organization.
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUser'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            const organizationUser = await client.organization.users.retrieve('user_id');

            console.log(organizationUser.id);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            organization_user = client.organization.users.retrieve(
                "user_id",
            )
            print(organization_user.id)
    patch:
      summary: Update user
      operationId: Users.updateOrganizationUser
      description: Update user permissions in the organization.
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationUser'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUser'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            const organizationUser = await client.organization.users.update('user_id', { role: 'admin' });

            console.log(organizationUser.id);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            organization_user = client.organization.users.update(
                user_id="user_id",
                role="admin",
            )
            print(organization_user.id)
  /search:
    get:
      summary: Search
      description: '[BETA] Search across knowledge.'
      operationId: search
      tags:
        - Search
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/next'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResult'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            // Automatically fetches more pages as needed.
            for await (const searchResultItem of client.search.search({ query: 'query' })) {
              console.log(searchResultItem.content);
            }
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            page = client.search.search(
                query="query",
            )
            page = page.data[0]
            print(page.content)
  /secrets:
    post:
      summary: Create secret
      operationId: Secrets.createSecret
      description: Create a new secret that can be referenced in converse API calls.
      tags:
        - Secrets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - value
              properties:
                name:
                  type: string
                  description: The name of the secret
                  maxLength: 300
                value:
                  type: string
                  description: The secret value to store
      responses:
        '201':
          description: Successfully created secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            const secret = await client.secrets.create({ name: 'name', value: 'value' });

            console.log(secret.id);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            secret = client.secrets.create(
                name="name",
                value="value",
            )
            print(secret.id)
    get:
      summary: List secrets
      operationId: Secrets.listSecrets
      description: Returns the list of user-created secrets.
      tags:
        - Secrets
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/after'
        - $ref: '#/components/parameters/before'
      responses:
        '200':
          description: List of secrets
          content:
            application/json:
              schema:
                type: object
                required:
                  - object
                  - data
                properties:
                  object:
                    type: string
                    enum:
                      - list
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Secret'
                    description: An array containing the actual response elements.
                  has_more:
                    type: boolean
                    description: >-
                      Whether or not there are more elements available after this set. If false, this set
                      comprises the end of the list.
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            // Automatically fetches more pages as needed.
            for await (const secret of client.secrets.list()) {
              console.log(secret.id);
            }
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            page = client.secrets.list()
            page = page.data[0]
            print(page.id)
  /secrets/{secret_id}:
    get:
      summary: Retrieve secret
      operationId: Secrets.retrieveSecret
      description: Retrieve a specific secret by ID.
      tags:
        - Secrets
      parameters:
        - name: secret_id
          in: path
          required: true
          schema:
            type: string
          description: The id of the secret to retrieve.
      responses:
        '200':
          description: Successfully retrieved secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            const secret = await client.secrets.retrieve('secret_id');

            console.log(secret.id);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            secret = client.secrets.retrieve(
                "secret_id",
            )
            print(secret.id)
    delete:
      summary: Delete secret
      operationId: Secrets.deleteSecret
      description: Delete a secret.
      tags:
        - Secrets
      parameters:
        - name: secret_id
          in: path
          required: true
          schema:
            type: string
          description: The id of the secret to delete.
      responses:
        '200':
          description: Successfully deleted secret
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            await client.secrets.delete('secret_id');
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            client.secrets.delete(
                "secret_id",
            )
  /organization/teamspaces/{teamspace_id}/invites:
    get:
      summary: List teamspace invites
      operationId: Invite.listTeamspaceInvites
      description: List all pending invites for a teamspace.
      tags:
        - Teamspace Invites
      parameters:
        - name: teamspace_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the teamspace
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/after'
        - $ref: '#/components/parameters/before'
      responses:
        '200':
          description: List of invites for the teamspace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTeamspaceInvites'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            // Automatically fetches more pages as needed.
            for await (const teamspaceInvite of client.organization.teamspaces.invites.list('teamspace_id')) {
              console.log(teamspaceInvite.id);
            }
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            page = client.organization.teamspaces.invites.list(
                teamspace_id="teamspace_id",
            )
            page = page.data[0]
            print(page.id)
    post:
      summary: Invite user to a teamspace
      operationId: Invite.inviteUserToTeamspace
      description: >-
        Invite a user to join the teamspace. This will send an invitation email. If the user already exists,
        the invite will be automatically accepted.
      tags:
        - Teamspace Invites
      parameters:
        - name: teamspace_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the teamspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteUserToTeamspaceRequest'
      responses:
        '201':
          description: User invited successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamspaceInvite'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            const teamspaceInvite = await client.organization.teamspaces.invites.create('teamspace_id', {
              email: 'dev@stainless.com',
            });

            console.log(teamspaceInvite.id);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            teamspace_invite = client.organization.teamspaces.invites.create(
                teamspace_id="teamspace_id",
                email="dev@stainless.com",
            )
            print(teamspace_invite.id)
  /organization/teamspaces/{teamspace_id}/invites/{invite_id}:
    get:
      summary: Retrieve teamspace invite
      operationId: Invite.getTeamspaceInvite
      description: Get a pending invite for in a teamspace.
      tags:
        - Teamspace Invites
      parameters:
        - name: teamspace_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the teamspace
        - name: invite_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the invite
      responses:
        '200':
          description: Invite for the user in the teamspace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamspaceInvite'
      x-codeSamples:
        - lang: JavaScript
          source: >-
            import Datagrid from 'datagrid-ai';


            const client = new Datagrid({
              apiKey: 'My API Key',
            });


            const teamspaceInvite = await client.organization.teamspaces.invites.retrieve('teamspace_id',
            'invite_id');


            console.log(teamspaceInvite.id);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            teamspace_invite = client.organization.teamspaces.invites.retrieve(
                invite_id="invite_id",
                teamspace_id="teamspace_id",
            )
            print(teamspace_invite.id)
    delete:
      summary: Delete teamspace invite
      operationId: Invite.deleteTeamspaceInvite
      description: Delete a pending invite for a user in a teamspace.
      tags:
        - Teamspace Invites
      parameters:
        - name: teamspace_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the teamspace
        - name: invite_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the invite
      responses:
        '204':
          description: Invite deleted successfully
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            await client.organization.teamspaces.invites.delete('teamspace_id', 'invite_id');
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            client.organization.teamspaces.invites.delete(
                invite_id="invite_id",
                teamspace_id="teamspace_id",
            )
  /organization/teamspaces/{teamspace_id}/users:
    get:
      summary: List teamspace users
      operationId: Users.listTeamspaceUsers
      description: Retrieve a list of users in the specified teamspace.
      tags:
        - Teamspace Users
      parameters:
        - name: teamspace_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the teamspace
        - name: search
          in: query
          schema:
            type: string
          required: false
          description: Search term to filter users by name or email
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/after'
        - $ref: '#/components/parameters/before'
      responses:
        '200':
          description: List of users in the teamspace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTeamspaceUsers'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            // Automatically fetches more pages as needed.
            for await (const teamspaceUser of client.organization.teamspaces.users.list('teamspace_id')) {
              console.log(teamspaceUser.id);
            }
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            page = client.organization.teamspaces.users.list(
                teamspace_id="teamspace_id",
            )
            page = page.data[0]
            print(page.id)
  /organization/teamspaces/{teamspace_id}/users/{user_id}:
    get:
      summary: Retrieve teamspace user
      operationId: Users.getTeamspaceUser
      description: Retrieve details of a specific user in the teamspace.
      tags:
        - Teamspace Users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
        - name: teamspace_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the teamspace
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamspaceUser'
      x-codeSamples:
        - lang: JavaScript
          source: >-
            import Datagrid from 'datagrid-ai';


            const client = new Datagrid({
              apiKey: 'My API Key',
            });


            const teamspaceUser = await client.organization.teamspaces.users.retrieve('teamspace_id',
            'user_id');


            console.log(teamspaceUser.id);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            teamspace_user = client.organization.teamspaces.users.retrieve(
                user_id="user_id",
                teamspace_id="teamspace_id",
            )
            print(teamspace_user.id)
    delete:
      summary: Delete teamspace user
      operationId: Users.revokeTeamspacePermissions
      description: Revoke a user's permissions from the teamspace.
      tags:
        - Teamspace Users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
        - name: teamspace_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the teamspace
      responses:
        '204':
          description: User revoked successfully
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            await client.organization.teamspaces.users.delete('teamspace_id', 'user_id');
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            client.organization.teamspaces.users.delete(
                user_id="user_id",
                teamspace_id="teamspace_id",
            )
    patch:
      summary: Update teamspace user
      operationId: Users.updateTeamspaceUser
      description: Update user permissions in the teamspace.
      tags:
        - Teamspace Users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
        - name: teamspace_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the teamspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTeamspaceUser'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamspaceUser'
      x-codeSamples:
        - lang: JavaScript
          source: >-
            import Datagrid from 'datagrid-ai';


            const client = new Datagrid({
              apiKey: 'My API Key',
            });


            const teamspaceUser = await client.organization.teamspaces.users.update('teamspace_id', 'user_id',
            {
              role: 'admin',
            });


            console.log(teamspaceUser.id);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            teamspace_user = client.organization.teamspaces.users.update(
                user_id="user_id",
                teamspace_id="teamspace_id",
                role="admin",
            )
            print(teamspace_user.id)
  /organization/teamspaces/{teamspace_id}:
    get:
      summary: Retrieve teamspace
      operationId: Teamspaces.retrieveTeamspace
      description: Retrieve a specific teamspace by ID.
      tags:
        - Teamspaces
      parameters:
        - name: teamspace_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the teamspace to retrieve.
      responses:
        '200':
          description: Successfully retrieved teamspace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teamspace'
        '404':
          description: Teamspace not found
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            const teamspace = await client.organization.teamspaces.retrieve('teamspace_id');

            console.log(teamspace.id);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            teamspace = client.organization.teamspaces.retrieve(
                "teamspace_id",
            )
            print(teamspace.id)
    patch:
      summary: Update teamspace
      operationId: Teamspaces.updateTeamspace
      description: Update the name and/or access settings of a teamspace.
      tags:
        - Teamspaces
      parameters:
        - name: teamspace_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the teamspace to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The new name of the teamspace
                  maxLength: 300
                access:
                  type: string
                  enum:
                    - open
                    - closed
                  description: >
                    Open teamspaces allow all organization members to join without admin approval. Access for
                    users who join this way is limited to conversations with agents in this teamspace. 


                    Closed teamspaces require admin approval to join.
      responses:
        '200':
          description: Successfully updated teamspace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teamspace'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            const teamspace = await client.organization.teamspaces.patch('teamspace_id');

            console.log(teamspace.id);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            teamspace = client.organization.teamspaces.patch(
                teamspace_id="teamspace_id",
            )
            print(teamspace.id)
  /organization/teamspaces:
    post:
      summary: Create teamspace
      operationId: Teamspaces.createTeamspace
      description: Create a new teamspace within your organization.
      tags:
        - Teamspaces
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - access
              properties:
                name:
                  type: string
                  description: The name of the teamspace
                  maxLength: 300
                access:
                  type: string
                  enum:
                    - open
                    - closed
                  description: >
                    Open teamspaces allow all organization members to join without admin approval. Access for
                    users who join this way is limited to conversations with agents in this teamspace. 


                    Closed teamspaces require admin approval to join.
      responses:
        '201':
          description: Successfully created teamspace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teamspace'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            const teamspace = await client.organization.teamspaces.create({ access: 'open', name: 'name' });

            console.log(teamspace.id);
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            teamspace = client.organization.teamspaces.create(
                access="open",
                name="name",
            )
            print(teamspace.id)
    get:
      summary: List teamspaces
      operationId: Teamspaces.listTeamspaces
      description: Returns the list of teamspaces within your organization.
      tags:
        - Teamspaces
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/after'
        - $ref: '#/components/parameters/before'
      responses:
        '200':
          description: List of teamspaces
          content:
            application/json:
              schema:
                type: object
                required:
                  - object
                  - data
                properties:
                  object:
                    type: string
                    enum:
                      - list
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Teamspace'
                    description: An array containing the actual response elements.
                  has_more:
                    type: boolean
                    description: >-
                      Whether or not there are more elements available after this set. If false, this set
                      comprises the end of the list.
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Datagrid from 'datagrid-ai';

            const client = new Datagrid({
              apiKey: 'My API Key',
            });

            // Automatically fetches more pages as needed.
            for await (const teamspace of client.organization.teamspaces.list()) {
              console.log(teamspace.id);
            }
        - lang: Python
          source: |-
            from datagrid_ai import Datagrid

            client = Datagrid(
                api_key="My API Key",
            )
            page = client.organization.teamspaces.list()
            page = page.data[0]
            print(page.id)
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    RedirectURLResponse:
      type: object
      description: The `redirect_url` object represents a redirect url for a connection.
      required:
        - object
        - redirect_url
      properties:
        object:
          type: string
          enum:
            - redirect_url
        redirect_url:
          type: string
          description: The redirect url for a connection.
    Agent:
      allOf:
        - $ref: '#/components/schemas/ConverseConfig'
        - type: object
          required:
            - object
            - id
            - name
            - created_at
          properties:
            object:
              type: string
              enum:
                - agent
              description: The object type, always 'agent'
            id:
              type: string
              description: Unique identifier for the agent
            name:
              type: string
              description: The name of the agent
            description:
              type: string
              nullable: true
              description: Description of the agent
            created_at:
              type: string
              format: date-time
              description: The ISO string for when the agent was created
    AgentListResponse:
      type: object
      required:
        - object
        - data
        - has_more
      properties:
        object:
          type: string
          enum:
            - list
          description: The object type, always 'list'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Agent'
          description: Array of agent objects
        has_more:
          type: boolean
          description: Whether there are more results available
    CreateAgentRequest:
      allOf:
        - $ref: '#/components/schemas/ConverseConfig'
        - type: object
          required:
            - name
          properties:
            name:
              type: string
              description: The name of the agent
              maxLength: 255
            description:
              type: string
              description: Description of the agent
              maxLength: 1000
              nullable: true
    UpdateAgentRequest:
      allOf:
        - $ref: '#/components/schemas/ConverseConfig'
        - type: object
          properties:
            name:
              type: string
              description: The name of the agent
              maxLength: 255
            description:
              type: string
              description: Description of the agent
              maxLength: 1000
              nullable: true
    Connection:
      type: object
      description: >-
        The `connection` object represents an authenticated connection to a third-party service (like Google
        Drive, Hubspot, Dropbox, etc.) that can be managed through the API.
      required:
        - object
        - id
        - name
        - teamspace_id
        - connector_id
        - created_at
        - updated_at
      properties:
        object:
          type: string
          enum:
            - connection
          description: The object type, which is always `connection`.
        id:
          type: string
          description: The connection identifier, which can be referenced in the API endpoints.
        name:
          type: string
          description: The name of the connection.
        teamspace_id:
          type: string
          description: The teamspace ID that owns this connection.
        connector_id:
          type: string
          description: The connector ID of the third-party service this connection authenticates with.
        valid:
          type: boolean
          description: Whether the connection authentication is valid.
        value:
          type: string
          description: The authentication value of the connection.
        created_at:
          type: string
          format: date-time
          description: The ISO string for when the connection was created.
        updated_at:
          type: string
          format: date-time
          description: The ISO string for when the connection was last updated.
    Connector:
      type: object
      description: >-
        The `connector` object represents an available connector that can be used to connect to a third-party
        service.
      required:
        - object
        - id
        - applicationId
        - name
      properties:
        object:
          type: string
          description: The object type, which is always `connector`.
          enum:
            - connector
        id:
          type: string
          description: The unique identifier for the connector.
        name:
          type: string
          description: The display name of the connector.
    AgentModel:
      type: string
      enum:
        - magpie-1
        - magpie-1.1
        - magpie-1.1-flash
      description: The version of Datagrid's agent brain.
    AgentToolItem:
      type: object
      required:
        - name
      properties:
        name:
          $ref: '#/components/schemas/AgentTool'
        connection_id:
          type: string
          description: The ID of the connection to use for the tool.
    AgentTool:
      type: string
      enum:
        - data_analysis
        - semantic_search
        - agent_memory
        - schema_info
        - table_info
        - create_dataset
        - calendar
        - email
        - schedule_recurring_message_tool
        - procore
        - egnyte
        - notion
        - google_sheets
        - slack
        - microsoft_teams
        - sharepoint
        - drive
        - fieldwire
        - webbrowser
        - pdf_manipulation
        - pdf_generator
        - acc
        - acc_forms
        - docusign
        - webflow
        - hubspot
        - nec
        - github
        - data_classification
        - data_extraction
        - image_detection
        - attachment_extraction
        - pdf_extraction
        - connect_data
        - download_data
        - web_search
        - fetch_url
        - company_prospect_researcher
        - people_prospect_researcher
    LlmModel:
      type: string
      description: The LLM used to generate responses.
      enum:
        - gemini-1.5-flash-001
        - gemini-1.5-flash-002
        - gemini-2.0-flash-001
        - gemini-2.0-flash
        - gemini-2.5-flash-preview-04-17
        - gemini-2.5-flash
        - gemini-2.5-flash-lite
        - gemini-1.5-pro-001
        - gemini-1.5-pro-002
        - gemini-2.5-pro-preview-05-06
        - gemini-2.5-pro
        - chatgpt-4o-latest
        - gpt-4
        - gpt-4-turbo
        - gpt-4o
        - gpt-4o-mini
        - gpt-5
    ConverseRequestBody:
      type: object
      required:
        - prompt
      properties:
        prompt:
          oneOf:
            - type: string
              title: Text prompt
              description: A text prompt to send to the agent.
            - type: array
              title: Input item list
              description: |
                A list of one or many input items to the agent, containing
                different content types.
              items:
                $ref: '#/components/schemas/InputItem'
        config:
          $ref: '#/components/schemas/ConverseConfig'
          description: The config that overrides the default config of the agent for that converse.
          nullable: true
        agent_id:
          type: string
          description: >-
            The ID of the agent that should be used for the converse. If both agent_id and conversation_id
            aren't provided - the new agent is created.
          nullable: true
        conversation_id:
          type: string
          description: >-
            The ID of the present conversation to use. If it's not provided - a new conversation will be
            created.
          nullable: true
        stream:
          type: boolean
          description: >-
            Determines the response type of the converse. Response is the Server-Sent Events if stream is set
            to true.
          default: false
          nullable: true
        generate_citations:
          type: boolean
          description: >-
            Determines whether the response should include citations. When enabled, the agent will generate
            citations for factual statements.
          default: false
          nullable: true
        auto_approve_actions:
          description: >-
            Auto-approve actions (skip halting for human approval). If boolean true: all tools auto-approve.
            If object: per-tool toggle by toolId (true to skip halting forhuman approval).
          nullable: true
          oneOf:
            - type: boolean
              default: false
              nullable: true
            - type: object
              additionalProperties:
                type: boolean
              nullable: true
        secret_ids:
          type: array
          description: >-
            Array of secret ID's to be included in the context. The secret value will be appended to the
            prompt but not stored in conversation history.
          items:
            type: string
          nullable: true
        text:
          type: object
          description: |
            Contains the format property used to specify the structured output schema.
            Structured output is currently only supported by the default agent model, magpie-1.1.
          nullable: true
          properties:
            format:
              type: object
              description: >
                The converse response will be a JSON string object, that adheres to the provided JSON schema.


                ```javascript

                const exampleJsonSchema = {
                  $id: "movie_info",
                  title: "movie_info",
                  type: "object",
                  properties: {
                    name: {
                      type: "string",
                      description: "The name of the movie",
                    },
                    director: {
                      type: "string",
                      description: "The director of the movie",
                    },
                    release_year: {
                      type: "number",
                      description: "The year the movie was released",
                    },
                  },
                  required: ["name", "director", "release_year"],
                  additionalProperties: false,
                };


                const response = await datagrid.converse({
                  prompt: "What movie won best picture at the 2001 oscars?",
                  text: { format: exampleJsonSchema },
                });


                // Example response: "{ "name": "Gladiator", "director": "Ridley Scott", "release_year": 2000
                }"

                const parsedResponse = JSON.parse(response.content[0].text);

                ```
    InputItem:
      type: object
      title: Input message
      description: >
        A message input to the model with a role indicating instruction following `agent` role are presumed to
        have been generated by the model in previous interactions.
      properties:
        type:
          type: string
          description: |
            The type of the message input. Always `message`.
          enum:
            - message
          x-stainless-const: true
        role:
          type: string
          description: |
            The role of the message input. Always `user`.
          enum:
            - user
        content:
          description: |
            Text, file or secret input to the agent.
          oneOf:
            - type: string
              title: Text input
              description: |
                A text input to the agent.
            - $ref: '#/components/schemas/InputMessageContentList'
      required:
        - role
        - content
    InputMessageContentList:
      type: array
      title: Input item content list
      description: |
        A list of one or many input items to the model, containing different content types.
      items:
        $ref: '#/components/schemas/InputContent'
    InputContent:
      oneOf:
        - $ref: '#/components/schemas/InputText'
        - $ref: '#/components/schemas/InputFile'
        - $ref: '#/components/schemas/InputSecret'
    InputText:
      type: object
      title: Text input
      description: |
        A text input to the model.
      properties:
        type:
          type: string
          description: |
            The type of the input item. Always `input_text`.
          enum:
            - input_text
          x-stainless-const: true
        text:
          type: string
          description: |
            The text input to the model.
      required:
        - type
        - text
    InputFile:
      type: object
      title: File input
      description: |
        A file input to the model.
      properties:
        type:
          type: string
          description: |
            The type of the input item. Always `input_file`.
          enum:
            - input_file
          x-stainless-const: true
        file_id:
          type: string
          description: |
            The ID of the file to be sent to the model.
      required:
        - type
        - file_id
    InputSecret:
      type: object
      title: Secret input
      description: |
        A secret input to the model.
      properties:
        type:
          type: string
          description: |
            The type of the input item. Always `input_secret`.
          enum:
            - input_secret
          x-stainless-const: true
        secret_id:
          type: string
          description: |
            The ID of the secret to be sent to the model.
      required:
        - type
        - secret_id
    ConverseAllResponses:
      oneOf:
        - $ref: '#/components/schemas/ConverseResponse'
        - $ref: '#/components/schemas/ConverseEvent'
    ConverseResponse:
      type: object
      required:
        - object
        - content
        - agent_id
        - conversation_id
      properties:
        object:
          type: string
          enum:
            - conversation.message
        content:
          type: array
          description: Contents of the converse response.
          items:
            type: object
            required:
              - text
            properties:
              text:
                type: string
        agent_id:
          type: string
          description: The ID of the agent used for the converse.
        conversation_id:
          type: string
          description: The ID of the agent conversation.
        citations:
          $ref: '#/components/schemas/Citations'
        credits:
          $ref: '#/components/schemas/ConverseCredits'
    Citations:
      type: array
      description: >-
        Array of citations that provide knowledges for factual statements in the response. Each citation
        includes the referenced text and its knowledges.
      items:
        type: object
        required:
          - citation
          - knowledges
        properties:
          citation:
            type: string
            description: The text snippet from the response that is being cited.
          knowledges:
            type: array
            description: Array of knowledges that support this citation.
            items:
              $ref: '#/components/schemas/CitationKnowledge'
    CitationKnowledge:
      type: object
      required:
        - type
        - knowledge_id
        - confirmations
      properties:
        type:
          type: string
          enum:
            - image
            - pdf_page
            - record
            - web_search
            - sql_query_result
        knowledge_id:
          type: string
          description: Id of the knowledge.
        confirmations:
          type: array
          description: An array of text snippets from the knowledge that confirm the citation.
          items:
            type: string
    ConverseConfig:
      type: object
      properties:
        system_prompt:
          type: string
          description: Directs your AI Agent's operational behavior.
          nullable: true
        agent_model:
          $ref: '#/components/schemas/AgentModel'
          nullable: true
        llm_model:
          $ref: '#/components/schemas/LlmModel'
          nullable: true
        knowledge_ids:
          type: array
          nullable: true
          description: >-
            Array of Knowledge IDs the agent should use during the converse. If not provided - default
            settings are used. If null provided - all available knowledge is used.
          items:
            type: string
        agent_tools:
          description: >
            Array of the agent tools to enable. If not provided - default tools of the agent are used. If
            empty list provided - none of the tools are used. If null provided - all tools are used. When
            connection_id is set for a tool, it will use that specific connection instead of the default one.


            Knowledge management tools:

            - data_analysis: Answer statistical or analytical questions like "Show my quarterly revenue
            growth"

            - semantic_search: Search knowledge through natural language queries.

            - agent_memory: Agents can remember experiences, conversations and user preferences.

            - schema_info: Helps the Agent understand column names and dataset purpose. Avoid disabling

            - table_info: Allow the AI Agent to get information about datasets and schemas

            - create_dataset: Agents respond with data tables


            Actions:

            - calendar: Allow the Agent to access and make changes to your Google Calendar

            - schedule_recurring_message_tool: Eliminate busywork such as: "Send a summary of today's meetings
            at 5pm on workdays"


            Data processing tools:

            - data_classification: Agents handle queries like "Label these emails as high, medium, or low
            priority"

            - data_extraction: Helps the agent understand data from other tools. Avoid disabling

            - image_detection: Extract information from images using AI

            - pdf_extraction: Extraction of information from PDFs using AI


            Enhanced response tools:

            - connect_data: Agents provide buttons to import data in response to queries like "Connect
            Hubspot"

            - download_data: Agents handle queries like "download the table as CSV"


            Web tools:

            - web_search: Agents search the internet, and provide links to their sources

            - fetch_url: Fetch URL content

            - company_prospect_researcher: Agents provide information about companies

            - people_prospect_researcher: Agents provide information about people
          type: array
          nullable: true
          items:
            oneOf:
              - $ref: '#/components/schemas/AgentTool'
              - $ref: '#/components/schemas/AgentToolItem'
        disabled_agent_tools:
          description: >
            Array of the agent tools to disable. Disabling is performed after the 'agent_tools' rules are
            applied.

            For example, agent_tools: null and disabled_agent_tools: [data_analysis] will enable everything
            but the data_analysis tool.

            If nothing or [] is provided, nothing is disabled and therefore only the agent_tools setting is
            relevant.
          type: array
          items:
            $ref: '#/components/schemas/AgentTool'
          nullable: true
        custom_prompt:
          type: string
          description: Use custom prompt to instruct the style and formatting of the agent's response
          nullable: true
        planning_prompt:
          type: string
          description: >-
            Define the planning strategy your AI Agent should use when breaking down tasks and solving
            problems
          nullable: true
    ConverseEvent:
      description: Events that are sent via SSE. Not available when stream isn't defined in request body or set to false
      oneOf:
        - $ref: '#/components/schemas/ConverseStatusEvent'
        - $ref: '#/components/schemas/ConverseContentMessageDeltaEvent'
        - $ref: '#/components/schemas/ConverseToolCallDeltaEvent'
    ConverseStatusEvent:
      type: object
      required:
        - event
        - data
      properties:
        event:
          $ref: '#/components/schemas/ConverseStatusEventType'
        data:
          $ref: '#/components/schemas/ConverseStatus'
    ConverseStatusEventType:
      type: string
      enum:
        - start
        - end
    ConverseStatus:
      type: object
      required:
        - status
        - agent_id
        - conversation_id
      properties:
        status:
          type: string
          description: Name of the status
        agent_id:
          type: string
          description: The ID of the agent used for the converse.
        conversation_id:
          type: string
          description: The ID of the agent conversation.
        citations:
          $ref: '#/components/schemas/Citations'
    ConverseContentMessageDeltaEvent:
      type: object
      required:
        - event
        - data
      properties:
        event:
          type: string
          enum:
            - delta
          description: Type of the event which is always delta
        data:
          $ref: '#/components/schemas/ConverseContentMessageDelta'
    ConverseToolCallDeltaEvent:
      type: object
      required:
        - event
        - data
      properties:
        event:
          type: string
          enum:
            - tool_call
          description: Type of the event which is always tool_call
        data:
          $ref: '#/components/schemas/ConverseToolCallDelta'
    ConverseContentMessageDelta:
      type: object
      required:
        - delta
      properties:
        delta:
          type: object
          required:
            - type
            - text
          properties:
            type:
              type: string
              enum:
                - text
            text:
              type: string
          description: Delta of the response message produced by the agent.
    ConverseToolCallDelta:
      type: object
      required:
        - type
        - id
        - status
        - tool
      properties:
        type:
          type: string
          enum:
            - tool_call
        id:
          type: string
          description: The ID of the tool call.
        status:
          type: string
          enum:
            - in_progress
            - completed
            - failed
        tool:
          type: object
          required:
            - name
            - label
            - description
          properties:
            name:
              type: string
              description: The name of the tool that was called.
            label:
              type: string
              description: The label of the tool that was called.
            description:
              type: string
              description: The description of the tool that was called.
            icon:
              type: string
              description: The icon of the tool that was called.
        output:
          type: string
          description: The output of the tool call.
    CreditsReport:
      type: object
      required:
        - remaining
        - consumed
        - total
      properties:
        remaining:
          type: number
          description: The number of unused credits remaining for the current billing period.
        consumed:
          type: number
          description: The number of credits consumed in the current billing period.
        total:
          type: number
          description: The initial total number of credits for the current billing period.
    ConverseCredits:
      type: object
      required:
        - consumed
      properties:
        consumed:
          type: number
          description: The number of credits consumed by the converse call.
    KnowledgeCredits:
      type: object
      required:
        - consumed
      properties:
        consumed:
          type: number
          description: The number of credits consumed by the knowledge.
    DatagridFile:
      type: object
      description: The `File` object represents a document that has been uploaded to Datagrid.
      required:
        - object
        - id
        - filename
        - created_at
        - bytes
        - media_type
      properties:
        object:
          type: string
          enum:
            - file
          description: The object type, which is always `file`.
        id:
          type: string
          description: The file identifier, which can be referenced in the API endpoints.
        filename:
          type: string
          description: The name of the file
        created_at:
          type: string
          format: date-time
          description: The ISO string for when the file was created.
        media_type:
          type: string
          description: The media type of the file.
    IFrameEventType:
      type: string
      enum:
        - datagrid-api/error
        - datagrid-api/connection-created
        - datagrid-api/connection-updated
        - datagrid-api/content-loaded
        - datagrid-api/resize
        - datagrid-api/knowledge-created
    ErrorPayload:
      type: object
      required:
        - message
        - error
      properties:
        message:
          type: string
          description: Error message
        error:
          type: object
          nullable: true
          description: Error object
    KnowledgeCreatedPayload:
      type: object
      required:
        - knowledge_id
      properties:
        knowledge_id:
          type: string
          description: The ID of the knowledge that was created
    ConnectionPayload:
      type: object
      description: >-
        The `connection` object represents an authenticated connection to a third-party service (like Google
        Drive, Hubspot, Dropbox, etc.) that can be managed through the API.
      required:
        - object
        - id
        - name
        - teamspace_id
        - connector_id
        - created_at
        - updated_at
      properties:
        object:
          type: string
          enum:
            - connection
          description: The object type, which is always `connection`.
        id:
          type: string
          description: The connection identifier, which can be referenced in the API endpoints.
        name:
          type: string
          description: The name of the connection.
        teamspace_id:
          type: string
          description: The teamspace ID that owns this connection.
        connector_id:
          type: string
          description: The connector ID of the third-party service this connection authenticates with.
        valid:
          type: boolean
          description: Whether the connection authentication is valid.
        value:
          type: string
          description: The authentication value of the connection.
        created_at:
          type: string
          format: date-time
          description: The ISO string for when the connection was created.
        updated_at:
          type: string
          format: date-time
          description: The ISO string for when the connection was last updated.
    ResizePayload:
      type: object
      required:
        - height
        - width
      properties:
        height:
          type: number
          description: Height of the iframe
        width:
          type: number
          description: Width of the iframe
    ErrorIFrameEvent:
      type: object
      description: Event emitted when an error occurs in the iframe
      required:
        - type
        - payload
      properties:
        type:
          type: string
          enum:
            - datagrid-api/error
        payload:
          $ref: '#/components/schemas/ErrorPayload'
    ConnectionCreatedIFrameEvent:
      type: object
      description: Event emitted when a new connection is successfully created
      required:
        - type
        - payload
      properties:
        type:
          type: string
          enum:
            - datagrid-api/connection-created
        payload:
          $ref: '#/components/schemas/ConnectionPayload'
    ConnectionUpdatedIFrameEvent:
      type: object
      description: Event emitted when an existing connection is successfully updated
      required:
        - type
        - payload
      properties:
        type:
          type: string
          enum:
            - datagrid-api/connection-updated
        payload:
          $ref: '#/components/schemas/ConnectionPayload'
    ContentLoadedIFrameEvent:
      type: object
      description: Event emitted when the iframe content has finished loading
      required:
        - type
        - payload
      properties:
        type:
          type: string
          enum:
            - datagrid-api/content-loaded
        payload:
          type: object
          description: No payload for content loaded event
    ResizeIFrameEvent:
      type: object
      description: Event emitted when the iframe needs to be resized
      required:
        - type
        - payload
      properties:
        type:
          type: string
          enum:
            - datagrid-api/resize
        payload:
          $ref: '#/components/schemas/ResizePayload'
    KnowledgeCreatedIFrameEvent:
      type: object
      description: Event emitted when a new knowledge is successfully created
      required:
        - type
        - payload
      properties:
        type:
          type: string
          enum:
            - datagrid-api/knowledge-created
        payload:
          $ref: '#/components/schemas/KnowledgeCreatedPayload'
    IFrameEvent:
      type: object
      description: Union type of all possible iframe events
      oneOf:
        - $ref: '#/components/schemas/ErrorIFrameEvent'
        - $ref: '#/components/schemas/ConnectionCreatedIFrameEvent'
        - $ref: '#/components/schemas/ConnectionUpdatedIFrameEvent'
        - $ref: '#/components/schemas/ContentLoadedIFrameEvent'
        - $ref: '#/components/schemas/ResizeIFrameEvent'
        - $ref: '#/components/schemas/KnowledgeCreatedIFrameEvent'
    Knowledge:
      type: object
      description: The `knowledge` object represents knowledge that an agent may leverage to respond.
      required:
        - object
        - id
        - name
        - created_at
        - status
        - row_counts
      properties:
        object:
          type: string
          enum:
            - knowledge
          description: The object type, which is always `knowledge`.
        id:
          type: string
          description: The knowledge identifier, which can be referenced in the API endpoints.
        name:
          type: string
          description: The name of the knowledge
        created_at:
          type: string
          format: date-time
          description: The ISO string for when the knowledge was created.
        updated_at:
          type: string
          format: date-time
          description: The ISO string for when the knowledge was last updated.
        status:
          $ref: '#/components/schemas/KnowledgeStatus'
        row_counts:
          type: object
          description: Row count statistics for the knowledge.
          required:
            - total
            - completed
            - failed
          properties:
            total:
              type: number
              description: The total number of rows in the knowledge.
            completed:
              type: number
              description: The number of rows successfully learned.
            failed:
              type: number
              description: The number of rows that failed to be processed for learning.
        credits:
          $ref: '#/components/schemas/KnowledgeCredits'
    KnowledgeStatus:
      type: string
      enum:
        - pending
        - partial
        - ready
      description: >-
        The current knowledge status can be one of three values: `pending`, `partial`, or `ready`. `pending`
        indicates that the knowledge is awaiting learning and will not be used by the agent when responding.
        `partial` indicates that the knowledge is partially learned. The agent may use some aspects of it when
        responding. `ready` indicates that the knowledge is fully learned and will be completely utilized in
        responses.
    UserMemory:
      type: object
      required:
        - id
        - object
        - updated_at
        - created_at
        - user_prompt
        - context
        - agent_id
        - user_id
        - memory
      properties:
        object:
          type: string
          enum:
            - user_memory
          description: The object type, which is always `user_memory`.
        id:
          type: string
          description: The ID of the user memory.
        updated_at:
          type: string
          description: The updated at of the user memory.
        created_at:
          type: string
          description: The created at of the user memory.
        user_prompt:
          type: string
          description: The user prompt of the user memory.
        context:
          type: array
          items:
            type: string
          description: The context of the user memory.
        agent_id:
          type: string
          description: The agent ID of the user memory.
        user_id:
          type: string
          description: The user ID of the user memory.
        memory:
          type: array
          items:
            type: string
          description: The memory of the user memory.
    CreateUserMemoryRequest:
      type: object
      required:
        - agent_id
        - memory
      properties:
        agent_id:
          type: string
          description: The agent ID of the user memory.
        user_prompt:
          type: string
          description: The user prompt of the user memory.
          nullable: true
        memory:
          type: string
          description: The memory of the user memory.
        context:
          type: string
          description: The context of the user memory.
          nullable: true
    OrganizationUserPermissions:
      type: object
      description: Represents a permission assigned to a user
      required:
        - role
      properties:
        role:
          type: string
          enum:
            - owner
            - admin
            - member
            - contributor
            - collaborator
          description: >
            The role to assign to the user in the organization. Available roles:

            - **owner**: Organization owner. Can manage organization settings, users and create new
            teamspaces.

            - **admin**: Organization administrator. Can manage organization settings, users and create new
            teamspaces.

            - **member**: Standard organization member. Can create new teamspaces.

            - **contributor**: Limited access. Can read shared resources. Cannot create new teamspaces.

            - **collaborator**: Limited access. Cannot read shared resources. Cannot create new teamspaces.
    OrganizationUser:
      type: object
      description: Represents a user in an organization
      required:
        - id
        - email
        - first_name
        - last_name
        - permissions
      properties:
        id:
          type: string
          description: The unique identifier of the user
        email:
          type: string
          format: email
          description: The email address of the user
        first_name:
          type: string
          description: The first name of the user
        last_name:
          type: string
          description: The last name of the user
        permissions:
          $ref: '#/components/schemas/OrganizationUserPermissions'
          description: The roles assigned to the user in the organization
    ListOrganizationUsers:
      type: object
      description: Response containing a list of users in an organization
      required:
        - object
        - data
        - has_more
      properties:
        object:
          type: string
          enum:
            - list
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationUser'
          description: Array of users in the organization
        has_more:
          type: boolean
          description: >-
            Whether or not there are more elements available after this set. If false, this set comprises the
            end of the list.
    UpdateOrganizationUser:
      type: object
      description: Represents a user in an organization
      required:
        - role
      properties:
        role:
          type: string
          enum:
            - admin
            - member
          description: 'The role to assign to the user in the organization. Available roles: admin, member'
    SearchResult:
      type: object
      required:
        - object
        - data
      properties:
        object:
          type: string
          enum:
            - list
        data:
          type: array
          items:
            $ref: '#/components/schemas/SearchResultItem'
          description: An array containing the found search items.
        next:
          type: string
          description: Cursor for fetching the next page of results.
    SearchResultResourceType:
      type: string
      enum:
        - knowledge_metadata
        - table_metadata
        - row_metadata
        - attachment_metadata
        - message_metadata
    SearchResultResource:
      oneOf:
        - $ref: '#/components/schemas/KnowledgeMetadata'
        - $ref: '#/components/schemas/TableMetadata'
        - $ref: '#/components/schemas/RowMetadata'
        - $ref: '#/components/schemas/AttachmentMetadata'
        - $ref: '#/components/schemas/MessageMetadata'
    SearchResultItem:
      type: object
      required:
        - object
        - score
        - updated_at
        - content
        - resource
      properties:
        object:
          type: string
          enum:
            - search_result_item
          description: The object type, which is always `search_result_item`.
        score:
          type: number
          description: The score of the item, between 0 and 1.
        updated_at:
          type: string
          format: date-time
          description: The date and time the item was last updated.
        title:
          type: string
          description: The title of the item.
        summary:
          type: string
          description: The summary of the item.
        content:
          type: array
          items:
            type: string
          description: Text snippets relevant to the search query.
        resource:
          description: The resource that matched the search query.
          $ref: '#/components/schemas/SearchResultResource'
    Secret:
      type: object
      description: The `Secret` object represents a securely stored secret that can be referenced in converse API calls.
      required:
        - object
        - id
        - name
        - created_at
      properties:
        object:
          type: string
          enum:
            - secret
          description: The object type, which is always `secret`.
        id:
          type: string
          description: The secret identifier, which can be referenced in the converse API.
        created_at:
          type: string
          description: The date and time the secret was created
        name:
          type: string
          description: The name of the secret
    InviteUserToTeamspaceRequest:
      type: object
      description: Represents a user in a teamspace
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: The email address of the user to invite
        permissions:
          type: object
          nullable: true
          description: The permissions to assign to the user in the teamspace
          required:
            - role
          properties:
            role:
              type: string
              enum:
                - admin
                - member
                - agents-only
                - agent-specific
              description: >-
                The role to assign to the user in the teamspace. Available roles: admin, member, agents-only,
                agent-specific
            agent_ids:
              nullable: true
              type: array
              items:
                type: string
              description: The IDs of the agents that the user has access to, if the role is agent-specific
    TeamspaceInvite:
      type: object
      description: Represents a invite for a user in a teamspace
      required:
        - email
        - permissions
        - status
        - id
      properties:
        id:
          type: string
          description: The ID of the invite. Only present if the invite is pending.
        email:
          type: string
          format: email
          description: The email address of the user invited
        permissions:
          $ref: '#/components/schemas/TeamspaceInvitePermissions'
        accepted_at:
          type: string
          nullable: true
          format: date-time
          description: The date and time the user accepted the invite. Only present if the invite is accepted.
        status:
          type: string
          enum:
            - pending
            - accepted
          description: Whether the user has accepted the invite
    TeamspaceInvitePermissions:
      type: object
      description: Represents the permissions assigned to a user in a teamspace
      required:
        - role
      properties:
        role:
          type: string
          enum:
            - admin
            - member
            - agents-only
            - agent-specific
          description: >-
            The role to assign to the user in the teamspace. Available roles: admin, member, agents-only,
            agent-specific
        agent_ids:
          nullable: true
          type: array
          items:
            type: string
          description: The IDs of the agents that the user has access to, if the role is agent-specific
    ListTeamspaceInvites:
      type: object
      description: Response containing a list of invites in a teamspace
      required:
        - object
        - data
      properties:
        object:
          type: string
          enum:
            - list
        data:
          type: array
          items:
            $ref: '#/components/schemas/TeamspaceInvite'
          description: An array containing the actual response elements.
        has_more:
          type: boolean
          description: >-
            Whether or not there are more elements available after this set. If false, this set comprises the
            end of the list.
    TeamspaceUserPermissions:
      type: object
      description: Represents a permission assigned to a user
      required:
        - role
      properties:
        role:
          type: string
          enum:
            - owner
            - admin
            - member
            - collaborator
            - agents-only
            - agent-specific
          description: >
            The role assigned to the user. Available roles:

            - **owner**: Creator of the teamspace. Full control over the teamspace. Can manage all users,
            settings, and resources.

            - **admin**: Full control over the teamspace. Can manage all users, settings, and resources.

            - **member**: Standard member access. Can view and interact with teamspace resources. Can invite
            other members.

            - **collaborator**: Read-only access with ability to comment and provide feedback.

            - **agents-only**: Access limited to AI agent interactions within the teamspace.

            - **agent-specific**: Limited access on teamspace level, can only access agents that are assigned
            to the teamspace.
        agent_ids:
          type: array
          nullable: true
          items:
            type: string
          description: The agent IDs that the user has access to, if the role is agent-specific.
    TeamspaceUser:
      type: object
      description: Represents a user in a teamspace
      required:
        - id
        - email
        - first_name
        - last_name
        - permissions
      properties:
        id:
          type: string
          description: The unique identifier of the user
        email:
          type: string
          format: email
          description: The email address of the user
        first_name:
          type: string
          description: The first name of the user
        last_name:
          type: string
          description: The last name of the user
        permissions:
          $ref: '#/components/schemas/TeamspaceUserPermissions'
          description: The permissions assigned to the user in the teamspace
    ListTeamspaceUsers:
      type: object
      description: Response containing a list of users in a teamspace
      required:
        - object
        - data
      properties:
        object:
          type: string
          enum:
            - list
        data:
          type: array
          items:
            $ref: '#/components/schemas/TeamspaceUser'
          description: An array containing the actual response elements.
        has_more:
          type: boolean
          description: >-
            Whether or not there are more elements available after this set. If false, this set comprises the
            end of the list.
    UpdateTeamspaceUser:
      type: object
      description: Represents a user in a teamspace
      required:
        - role
      properties:
        role:
          type: string
          enum:
            - admin
            - member
            - agents-only
            - agent-specific
        agent_ids:
          nullable: true
          type: array
          items:
            type: string
          description: The agent IDs that the user has access to, if the role is agent-specific.
    Teamspace:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        name:
          type: string
          description: The name of the teamspace
        access:
          type: string
          enum:
            - open
            - closed
          description: >
            Open teamspaces allow all organization members to join without admin approval. Access for users
            who join this way is limited to conversations with agents in this teamspace. 


            Closed teamspaces require admin approval to join.
        created_at:
          type: string
          format: date-time
          description: The ISO string for when the teamspace was created.
    KnowledgeMetadata:
      type: object
      description: Represents metadata for a knowledge object
      required:
        - object
        - id
        - name
        - navigation_item
        - url
      properties:
        object:
          type: string
          enum:
            - knowledge_metadata
          description: The object type, which is always `knowledge_metadata`.
        id:
          type: string
          description: The unique identifier of the knowledge.
        name:
          type: string
          description: The name of the knowledge.
        navigation_item:
          $ref: '#/components/schemas/NavigationItemMetadata'
          description: The navigation item of the knowledge.
        url:
          type: string
          description: The url of the knowledge.
    TableMetadata:
      type: object
      description: Represents metadata for a table in a knowledge object
      required:
        - object
        - id
        - name
        - knowledge
        - url
      properties:
        object:
          type: string
          enum:
            - table_metadata
          description: The object type, which is always `table_metadata`.
        id:
          type: string
          description: The unique identifier for the table.
        name:
          type: string
          description: The name of the table.
        knowledge:
          $ref: '#/components/schemas/KnowledgeMetadata'
          description: The knowledge object that the table belongs to.
        url:
          type: string
          description: The url of the table.
    RowMetadata:
      type: object
      description: Metadata of a row in a table
      required:
        - object
        - id
        - table
        - url
      properties:
        object:
          type: string
          enum:
            - row_metadata
          description: The object type, which is always `row_metadata`.
        id:
          type: string
          description: The id of the row (__datagrid__uuid), unique within the table.
        table:
          $ref: '#/components/schemas/TableMetadata'
          description: The table that the row belongs to.
        url:
          type: string
          description: The url of the row of the table.
    AttachmentMetadata:
      type: object
      description: Metadata of an attachment object
      required:
        - object
        - media_type
        - name
        - source
        - url
      properties:
        object:
          type: string
          enum:
            - attachment_metadata
          description: The object type, which is always `attachment_metadata`.
        name:
          type: string
          description: The name of the attachment.
        media_type:
          type: string
          description: The media type of the attachment.
        url:
          type: string
          description: The url of the blob of the attachment.
        page:
          type: object
          required:
            - page_number
            - url
            - pageNumber
          properties:
            page_number:
              type: number
              description: The page number of the attachment.
            url:
              type: string
              description: The url of the blob of the page.
            pageNumber:
              type: number
              description: DEPRECATED use page_number instead.
              deprecated: true
        source:
          oneOf:
            - $ref: '#/components/schemas/MessageMetadata'
            - $ref: '#/components/schemas/RowMetadata'
          description: The source of the attachment.
    MessageMetadata:
      type: object
      description: Metadata of a conversation message object
      required:
        - object
        - conversation
        - id
        - author_id
        - author_type
        - url
      properties:
        object:
          type: string
          enum:
            - message_metadata
          description: The object type, which is always `message_metadata`.
        conversation:
          $ref: '#/components/schemas/ConversationMetadata'
          description: The conversation that the message belongs to.
        id:
          type: string
          description: The id of the message.
        author_id:
          type: string
          description: The identifier of the message author (either a user ID or agent ID).
        author_type:
          type: string
          enum:
            - user
            - agent
          description: Indicates whether the author is a user or an agent.
        author_name:
          type: string
          description: The pretty name of the author of the message.
        url:
          type: string
          description: The url of the message.
    ConversationMetadata:
      type: object
      description: Metadata of a conversation object
      required:
        - object
        - id
        - url
        - name
        - navigation_item
      properties:
        object:
          type: string
          enum:
            - conversation_metadata
          description: The object type, which is always `conversation_metadata`.
        id:
          type: string
          description: The id of the conversation.
        url:
          type: string
          description: The url of the conversation.
        navigation_item:
          $ref: '#/components/schemas/NavigationItemMetadata'
          description: The navigation item of the conversation.
        name:
          type: string
          description: The name of the conversation.
    NavigationItemMetadata:
      type: object
      description: Metadata of a navigation item object
      required:
        - object
        - id
        - name
        - url
        - item_type
      properties:
        object:
          type: string
          enum:
            - navigation_item_metadata
          description: The object type, which is always `navigation_item_metadata`.
        id:
          type: string
          description: The id of the navigation item.
        name:
          type: string
          description: The name of the navigation item.
        emoticon:
          type: string
          description: The emoticon of the navigation item.
        source_media_type:
          type: string
          description: The media type of the navigation item if known.
        item_type:
          type: string
          description: The type of the navigation item.
        url:
          type: string
          description: The url of the navigation item.
  parameters:
    limit:
      name: limit
      in: query
      schema:
        type: integer
        default: 20
        minimum: 1
        maximum: 100
      required: false
      description: The limit on the number of objects to return, ranging between 1 and 100.
    after:
      name: after
      in: query
      schema:
        type: string
      required: false
      description: >-
        A cursor to use in pagination. `after` is an object ID that defines your place in the list. For
        example, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent
        call can include `after=obj_foo` to fetch the next page of the list.
    before:
      name: before
      in: query
      schema:
        type: string
      required: false
      description: >-
        A cursor to use in pagination. `before` is an object ID that defines your place in the list. For
        example, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent
        call can include `before=obj_bar` to fetch the previous page of the list.
    next:
      name: next
      in: query
      schema:
        type: string
      required: false
      description: >-
        A cursor to use in pagination to continue a query from the previous request. This is automatically
        added when the request has more results to fetch.
    offset:
      name: offset
      in: query
      schema:
        type: integer
        default: 0
        minimum: 0
        maximum: 100000
      required: false
      description: >-
        A cursor to use in pagination. `offset` is an integer that defines your place in the list. For
        example, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent
        call can include `offset=100` to fetch the next page of the list.
