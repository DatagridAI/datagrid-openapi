{"openapi":"3.0.3","info":{"version":"0.1.0-alpha.2","title":"Datagrid API","description":"Datagrid API"},"servers":[{"url":"https://api.datagrid.com/v1"}],"x-readme":{"explorer-enabled":true,"samples-languages":["python","node","shell"]},"security":[{"BearerAuth":[]}],"tags":[{"name":"Knowledge","x-displayName":"Knowledge Management","description":"Operations for managing knowledge"},{"name":"Converse","x-displayName":"Datagrid Converse","description":"Conversation with Datagrid Agents"}],"paths":{"/converse":{"post":{"summary":"Converse","operationId":"Converse","description":"Converse with an AI Agent","requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConverseRequestBody"}}}},"tags":["Converse"],"responses":{"200":{"description":"Converse response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConverseResponse"}}}}},"x-codeSamples":[{"lang":"JavaScript","source":"import Datagrid from 'datagrid-ai';\n\nconst client = new Datagrid({\n  apiKey: process.env['DATAGRID_API_KEY'], // This is the default and can be omitted\n});\n\nasync function main() {\n  const response = await client.converse({ prompt: 'prompt' });\n\n  console.log(response.agent_id);\n}\n\nmain();"},{"lang":"Python","source":"import os\nfrom datagrid_ai import Datagrid\n\nclient = Datagrid(\n    api_key=os.environ.get(\"DATAGRID_API_KEY\"),  # This is the default and can be omitted\n)\nresponse = client.converse(\n    prompt=\"prompt\",\n)\nprint(response.agent_id)"}]}},"/knowledge":{"post":{"summary":"Create knowledge","operationId":"Knowledge.createKnowledge","description":"Create knowledge which will be learned and leveraged by agents.","tags":["Knowledge"],"requestBody":{"required":true,"content":{"multipart/form-data":{"schema":{"type":"object","required":["files"],"properties":{"name":{"type":"string","description":"The name of the knowledge."},"files":{"type":"array","items":{"type":"string","format":"binary"},"nullable":false,"description":"The files to be uploaded and learned. Supported media types are `pdf`, `json`, `csv`, `text`, `png`, `jpeg`, `excel`, `google sheets`."}}}}}},"responses":{"201":{"description":"Successfully created knowledge","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Knowledge"}}}}},"x-codeSamples":[{"lang":"JavaScript","source":"import Datagrid from 'datagrid-ai';\n\nconst client = new Datagrid({\n  apiKey: process.env['DATAGRID_API_KEY'], // This is the default and can be omitted\n});\n\nasync function main() {\n  const knowledge = await client.knowledge.create({ files: [fs.createReadStream('path/to/file')] });\n\n  console.log(knowledge.id);\n}\n\nmain();"},{"lang":"Python","source":"import os\nfrom datagrid_ai import Datagrid\n\nclient = Datagrid(\n    api_key=os.environ.get(\"DATAGRID_API_KEY\"),  # This is the default and can be omitted\n)\nknowledge = client.knowledge.create(\n    files=[b'raw file contents'],\n)\nprint(knowledge.id)"}]},"get":{"summary":"List knowledge","operationId":"Knowledge.listKnowledge","description":"Returns the list of knowledge.","tags":["Knowledge"],"parameters":[{"$ref":"#/components/parameters/limit"},{"$ref":"#/components/parameters/after"},{"$ref":"#/components/parameters/before"}],"responses":{"200":{"description":"List knowledges","content":{"application/json":{"schema":{"type":"object","required":["object","data"],"properties":{"object":{"type":"string","enum":["list"]},"data":{"type":"array","items":{"$ref":"#/components/schemas/Knowledge"},"description":"An array containing the actual response elements, paginated by any request parameters."},"has_more":{"type":"boolean","description":"Whether or not there are more elements available after this set. If false, this set comprises the end of the list."}}}}}}},"x-codeSamples":[{"lang":"JavaScript","source":"import Datagrid from 'datagrid-ai';\n\nconst client = new Datagrid({\n  apiKey: process.env['DATAGRID_API_KEY'], // This is the default and can be omitted\n});\n\nasync function main() {\n  // Automatically fetches more pages as needed.\n  for await (const knowledge of client.knowledge.list()) {\n    console.log(knowledge.id);\n  }\n}\n\nmain();"},{"lang":"Python","source":"import os\nfrom datagrid_ai import Datagrid\n\nclient = Datagrid(\n    api_key=os.environ.get(\"DATAGRID_API_KEY\"),  # This is the default and can be omitted\n)\npage = client.knowledge.list()\npage = page.data[0]\nprint(page.id)"}]}},"/knowledge/{knowledge_id}":{"get":{"summary":"Retrieve knowledge","operationId":"Knowledge.retrieveKnowledge","description":"Retrieves a knowledge by id.","tags":["Knowledge"],"parameters":[{"name":"knowledge_id","in":"path","required":true,"schema":{"type":"string"},"description":"The id of the knowledge to retrieve."}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Knowledge"}}}}},"x-codeSamples":[{"lang":"JavaScript","source":"import Datagrid from 'datagrid-ai';\n\nconst client = new Datagrid({\n  apiKey: process.env['DATAGRID_API_KEY'], // This is the default and can be omitted\n});\n\nasync function main() {\n  const knowledge = await client.knowledge.retrieve('knowledge_id');\n\n  console.log(knowledge.id);\n}\n\nmain();"},{"lang":"Python","source":"import os\nfrom datagrid_ai import Datagrid\n\nclient = Datagrid(\n    api_key=os.environ.get(\"DATAGRID_API_KEY\"),  # This is the default and can be omitted\n)\nknowledge = client.knowledge.retrieve(\n    \"knowledge_id\",\n)\nprint(knowledge.id)"}]},"patch":{"summary":"Update knowledge","operationId":"Knowledge.updateKnowledge","description":"Update a knowledge's attributes.","tags":["Knowledge"],"parameters":[{"name":"knowledge_id","in":"path","required":true,"schema":{"type":"string"},"description":"The id of the knowledge to update."}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"type":"object","description":"The new name for the `knowledge`.","required":["name"],"properties":{"name":{"type":"string"}}}}}},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"object","properties":{"name":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"JavaScript","source":"import Datagrid from 'datagrid-ai';\n\nconst client = new Datagrid({\n  apiKey: process.env['DATAGRID_API_KEY'], // This is the default and can be omitted\n});\n\nasync function main() {\n  const knowledge = await client.knowledge.update('knowledge_id', { name: 'name' });\n\n  console.log(knowledge.name);\n}\n\nmain();"},{"lang":"Python","source":"import os\nfrom datagrid_ai import Datagrid\n\nclient = Datagrid(\n    api_key=os.environ.get(\"DATAGRID_API_KEY\"),  # This is the default and can be omitted\n)\nknowledge = client.knowledge.update(\n    knowledge_id=\"knowledge_id\",\n    name=\"name\",\n)\nprint(knowledge.name)"}]},"delete":{"summary":"Delete knowledge","operationId":"Knowledge.deleteKnowledge","description":"Delete knowledge.","tags":["Knowledge"],"parameters":[{"name":"knowledge_id","in":"path","required":true,"schema":{"type":"string"},"description":"The id of the knowledge to delete."}],"responses":{"200":{"description":"OK"}},"x-codeSamples":[{"lang":"JavaScript","source":"import Datagrid from 'datagrid-ai';\n\nconst client = new Datagrid({\n  apiKey: process.env['DATAGRID_API_KEY'], // This is the default and can be omitted\n});\n\nasync function main() {\n  await client.knowledge.delete('knowledge_id');\n}\n\nmain();"},{"lang":"Python","source":"import os\nfrom datagrid_ai import Datagrid\n\nclient = Datagrid(\n    api_key=os.environ.get(\"DATAGRID_API_KEY\"),  # This is the default and can be omitted\n)\nclient.knowledge.delete(\n    \"knowledge_id\",\n)"}]}}},"components":{"securitySchemes":{"BearerAuth":{"type":"http","scheme":"bearer"}},"parameters":{"limit":{"name":"limit","in":"query","schema":{"type":"integer","default":20,"minimum":1,"maximum":100},"required":false,"description":"The limit on the number of objects to return, ranging between 1 and 100."},"after":{"name":"after","in":"query","schema":{"type":"string"},"required":false,"description":"A cursor to use in pagination. `after` is an object ID that defines your place in the list. For example, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `after=obj_foo` to fetch the next page of the list."},"before":{"name":"before","in":"query","schema":{"type":"string"},"required":false,"description":"A cursor to use in pagination. `before` is an object ID that defines your place in the list. For example, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `before=obj_bar` to fetch the previous page of the list."}},"schemas":{"Knowledge":{"type":"object","description":"The `knowledge` object represents knowledge that an agent may leverage to respond.","required":["object","id","name","created_at","status","row_counts"],"properties":{"object":{"type":"string","enum":["knowledge"],"description":"The object type, which is always `knowledge`."},"id":{"type":"string","description":"The knowledge identifier, which can be referenced in the API endpoints."},"name":{"type":"string","description":"The name of the knowledge"},"created_at":{"type":"string","format":"date-time","description":"The ISO string for when the knowledge was created."},"status":{"$ref":"#/components/schemas/KnowledgeStatus"},"row_counts":{"type":"object","description":"Row count statistics for the knowledge.","required":["total","completed","failed"],"properties":{"total":{"type":"number","description":"The total number of rows in the knowledge."},"completed":{"type":"number","description":"The number of rows successfully learned."},"failed":{"type":"number","description":"The number of rows that failed to be processed for learning."}}}}},"KnowledgeStatus":{"type":"string","enum":["pending","partial","ready"],"description":"The current knowledge status can be one of three values: `pending`, `partial`, or `ready`. `pending` indicates that the knowledge is awaiting learning and will not be used by the agent when responding. `partial` indicates that the knowledge is partially learned. The agent may use some aspects of it when responding. `ready` indicates that the knowledge is fully learned and will be completely utilized in responses."},"ConverseRequestBody":{"type":"object","required":["prompt"],"properties":{"prompt":{"type":"string","description":"The input prompt."},"config":{"$ref":"#/components/schemas/ConverseConfig","description":"The config that overrides the default config of the agent for that converse."},"agent_id":{"type":"string","description":"The ID of the agent that should be used for the converse. If both agent_id and conversation_id aren't provided - the new agent is created."},"conversation_id":{"type":"string","description":"The ID of the present conversation to use. If it's not provided - a new conversation will be created."},"stream":{"type":"boolean","description":"Determines the response type of the converse. Response is the Server-Sent Events if stream is set to true.","default":false}}},"ConverseAllResponses":{"oneOf":[{"$ref":"#/components/schemas/ConverseResponse"},{"$ref":"#/components/schemas/ConverseEvent"}]},"ConverseResponse":{"type":"object","required":["object","content","agent_id","conversation_id"],"properties":{"object":{"type":"string","enum":["conversation.message"]},"content":{"type":"array","description":"Contents of the converse response.","items":{"type":"object","required":["text"],"properties":{"text":{"type":"string"}}}},"agent_id":{"type":"string","description":"The ID of the agent used for the converse."},"conversation_id":{"type":"string","description":"The ID of the agent conversation."}}},"ConverseConfig":{"type":"object","properties":{"system_prompt":{"type":"string","description":"Directs your AI Agent's operational behavior."},"agent_model":{"$ref":"#/components/schemas/AgentModel"},"llm_model":{"$ref":"#/components/schemas/LlmModel"},"knowledge_ids":{"type":"array","nullable":true,"description":"Array of Knowledge IDs the agent should use during the converse. If not provided - default settings are used. If null provided - all available knowledge is used.","items":{"type":"string"}},"agent_tools":{"description":"Array of the agent tools to enable. If not provided - default tools of the agent are used. If empty list provided - none of the tools are used. If null provided - all tools are used.","type":"array","nullable":true,"items":{"$ref":"#/components/schemas/AgentTool"}}}},"AgentModel":{"type":"string","enum":["magpie-1","magpie-1.1"],"description":"The version of Datagrid's agent brain."},"AgentTool":{"description":"Customizes AI Agent abilities","oneOf":[{"$ref":"#/components/schemas/ActionTool"},{"$ref":"#/components/schemas/DataProcessingTool"},{"$ref":"#/components/schemas/EnhancedResponsesTool"},{"$ref":"#/components/schemas/KnowledgeManagementTool"},{"$ref":"#/components/schemas/WebTool"}]},"ActionTool":{"type":"string","enum":["calendar","schedule_recurring_message_tool"],"description":"- calendar: \"Allows the Agent access to your Calendar\"\n- schedule_recurring_message_tool: \"Eliminate busywork such as: “Send a summary of today’s meetings at 5pm on workdays”\"\n"},"DataProcessingTool":{"type":"string","enum":["data_classification","data_extraction","schema_info","table_info"],"description":"- data_classification: \"Agents handle queries like “Label these emails as high, medium, or low priority”\"\n- data_extraction: \"Helps the agent understand data from other tools. Avoid disabling\"\n- schema_info: \"Helps the Agent understand column names and dataset purpose. Avoid disabling\"\n- table_info: \"Allow the AI Agent to get information about datasets and schemas\"\n"},"EnhancedResponsesTool":{"type":"string","enum":["connect_data","create_dataset","download_data"],"description":"- connect_data: \"Agents provide buttons to import data in response to queries like “Connect Hubspot”\"\n- create_dataset: \"Agents respond with data tables\"\n- download_data: \"Agents handle queries like “download the table as CSV”\"\n"},"KnowledgeManagementTool":{"type":"string","enum":["data_analysis","image_detection","agent_memory","pdf_extraction","semantic_search"],"description":"- data_analysis: \"Answer statistical or analytical questions like “Show my quarterly revenue growth”\"\n- image_detection: \"Extract information from images using AI\"\n- agent_memory: \"Agents can remember experiences, conversations and user preferences.\"\n- pdf_extraction: \"Extraction of information from PDFs using AI\"\n- semantic_search: \"Search knowledge through natural language queries.\"\n"},"WebTool":{"type":"string","enum":["company_prospect_researcher","people_prospect_researcher","web_search","fetch_url"],"description":"- company_prospect_researcher: \"Agents provide information about companies\"\n- people_prospect_researcher: \"Agents provide information about people\"\n- web_search: \"Agents search the internet, and provide links to their sources\"\n- fetch_url: \"Fetch URL content\"\n"},"LlmModel":{"type":"string","description":"The LLM used to generate responses.","enum":["gemini-1.5-flash-001","gemini-1.5-flash-002","gemini-2.0-flash-001","gemini-1.5-pro-001","gemini-1.5-pro-002","chatgpt-4o-latest","gpt-4","gpt-4-turbo","gpt-4o","gpt-4o-mini"]},"ConverseEvent":{"description":"Events that are sent via SSE. Not available when stream isn't defined in request body or set to false","oneOf":[{"$ref":"#/components/schemas/ConverseStatusEvent"},{"$ref":"#/components/schemas/ConverseContentMessageDeltaEvent"}]},"ConverseStatusEvent":{"type":"object","required":["event","data"],"properties":{"event":{"$ref":"#/components/schemas/ConverseStatusEventType"},"data":{"$ref":"#/components/schemas/ConverseStatus"}}},"ConverseStatusEventType":{"type":"string","enum":["start","end"]},"ConverseStatus":{"type":"object","required":["status","agent_id","conversation_id"],"properties":{"status":{"type":"string","description":"Name of the status"},"agent_id":{"type":"string","description":"The ID of the agent used for the converse."},"conversation_id":{"type":"string","description":"The ID of the agent conversation."}}},"ConverseContentMessageDeltaEvent":{"type":"object","required":["event","data"],"properties":{"event":{"type":"string","enum":["delta"],"description":"Type of the event which is always delta"},"data":{"$ref":"#/components/schemas/ConverseContentMessageDelta"}}},"ConverseContentMessageDelta":{"type":"object","required":["delta"],"properties":{"delta":{"type":"object","required":["type","text"],"properties":{"type":{"type":"string","enum":["text"]},"text":{"type":"string"}},"description":"Delta of the response message produced by the agent."}}}}}}